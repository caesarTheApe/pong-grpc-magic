// source: pong.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.pong.GameStartedRequest', null, global);
goog.exportSymbol('proto.pong.GameStartedResponse', null, global);
goog.exportSymbol('proto.pong.GameStreamRequest', null, global);
goog.exportSymbol('proto.pong.GameUpdate', null, global);
goog.exportSymbol('proto.pong.GameUpdateBytes', null, global);
goog.exportSymbol('proto.pong.PlayerInput', null, global);
goog.exportSymbol('proto.pong.SignalReadyRequest', null, global);
goog.exportSymbol('proto.pong.SignalReadyResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pong.GameStartedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pong.GameStartedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pong.GameStartedRequest.displayName = 'proto.pong.GameStartedRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pong.GameStartedResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pong.GameStartedResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pong.GameStartedResponse.displayName = 'proto.pong.GameStartedResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pong.SignalReadyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pong.SignalReadyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pong.SignalReadyRequest.displayName = 'proto.pong.SignalReadyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pong.SignalReadyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pong.SignalReadyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pong.SignalReadyResponse.displayName = 'proto.pong.SignalReadyResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pong.GameUpdateBytes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pong.GameUpdateBytes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pong.GameUpdateBytes.displayName = 'proto.pong.GameUpdateBytes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pong.PlayerInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pong.PlayerInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pong.PlayerInput.displayName = 'proto.pong.PlayerInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pong.GameUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pong.GameUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pong.GameUpdate.displayName = 'proto.pong.GameUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pong.GameStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pong.GameStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pong.GameStreamRequest.displayName = 'proto.pong.GameStreamRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pong.GameStartedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pong.GameStartedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pong.GameStartedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pong.GameStartedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clientId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    playerNumber: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pong.GameStartedRequest}
 */
proto.pong.GameStartedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pong.GameStartedRequest;
  return proto.pong.GameStartedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pong.GameStartedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pong.GameStartedRequest}
 */
proto.pong.GameStartedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pong.GameStartedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pong.GameStartedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pong.GameStartedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pong.GameStartedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlayerNumber();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.pong.GameStartedRequest.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pong.GameStartedRequest} returns this
 */
proto.pong.GameStartedRequest.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string client_id = 2;
 * @return {string}
 */
proto.pong.GameStartedRequest.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pong.GameStartedRequest} returns this
 */
proto.pong.GameStartedRequest.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 player_number = 3;
 * @return {number}
 */
proto.pong.GameStartedRequest.prototype.getPlayerNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pong.GameStartedRequest} returns this
 */
proto.pong.GameStartedRequest.prototype.setPlayerNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pong.GameStartedResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pong.GameStartedResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pong.GameStartedResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pong.GameStartedResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pong.GameStartedResponse}
 */
proto.pong.GameStartedResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pong.GameStartedResponse;
  return proto.pong.GameStartedResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pong.GameStartedResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pong.GameStartedResponse}
 */
proto.pong.GameStartedResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pong.GameStartedResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pong.GameStartedResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pong.GameStartedResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pong.GameStartedResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.pong.GameStartedResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pong.GameStartedResponse} returns this
 */
proto.pong.GameStartedResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pong.SignalReadyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pong.SignalReadyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pong.SignalReadyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pong.SignalReadyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pong.SignalReadyRequest}
 */
proto.pong.SignalReadyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pong.SignalReadyRequest;
  return proto.pong.SignalReadyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pong.SignalReadyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pong.SignalReadyRequest}
 */
proto.pong.SignalReadyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pong.SignalReadyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pong.SignalReadyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pong.SignalReadyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pong.SignalReadyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.pong.SignalReadyRequest.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pong.SignalReadyRequest} returns this
 */
proto.pong.SignalReadyRequest.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pong.SignalReadyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pong.SignalReadyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pong.SignalReadyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pong.SignalReadyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pong.SignalReadyResponse}
 */
proto.pong.SignalReadyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pong.SignalReadyResponse;
  return proto.pong.SignalReadyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pong.SignalReadyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pong.SignalReadyResponse}
 */
proto.pong.SignalReadyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pong.SignalReadyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pong.SignalReadyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pong.SignalReadyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pong.SignalReadyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pong.GameUpdateBytes.prototype.toObject = function(opt_includeInstance) {
  return proto.pong.GameUpdateBytes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pong.GameUpdateBytes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pong.GameUpdateBytes.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pong.GameUpdateBytes}
 */
proto.pong.GameUpdateBytes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pong.GameUpdateBytes;
  return proto.pong.GameUpdateBytes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pong.GameUpdateBytes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pong.GameUpdateBytes}
 */
proto.pong.GameUpdateBytes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pong.GameUpdateBytes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pong.GameUpdateBytes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pong.GameUpdateBytes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pong.GameUpdateBytes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.pong.GameUpdateBytes.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.pong.GameUpdateBytes.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.pong.GameUpdateBytes.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pong.GameUpdateBytes} returns this
 */
proto.pong.GameUpdateBytes.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pong.PlayerInput.prototype.toObject = function(opt_includeInstance) {
  return proto.pong.PlayerInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pong.PlayerInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pong.PlayerInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    input: jspb.Message.getFieldWithDefault(msg, 2, ""),
    playernumber: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pong.PlayerInput}
 */
proto.pong.PlayerInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pong.PlayerInput;
  return proto.pong.PlayerInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pong.PlayerInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pong.PlayerInput}
 */
proto.pong.PlayerInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInput(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayernumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pong.PlayerInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pong.PlayerInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pong.PlayerInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pong.PlayerInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInput();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlayernumber();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string playerId = 1;
 * @return {string}
 */
proto.pong.PlayerInput.prototype.getPlayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pong.PlayerInput} returns this
 */
proto.pong.PlayerInput.prototype.setPlayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string input = 2;
 * @return {string}
 */
proto.pong.PlayerInput.prototype.getInput = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pong.PlayerInput} returns this
 */
proto.pong.PlayerInput.prototype.setInput = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 playerNumber = 3;
 * @return {number}
 */
proto.pong.PlayerInput.prototype.getPlayernumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pong.PlayerInput} returns this
 */
proto.pong.PlayerInput.prototype.setPlayernumber = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pong.GameUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.pong.GameUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pong.GameUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pong.GameUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    gamewidth: jspb.Message.getFieldWithDefault(msg, 13, 0),
    gameheight: jspb.Message.getFieldWithDefault(msg, 14, 0),
    p1width: jspb.Message.getFieldWithDefault(msg, 15, 0),
    p1height: jspb.Message.getFieldWithDefault(msg, 16, 0),
    p2width: jspb.Message.getFieldWithDefault(msg, 17, 0),
    p2height: jspb.Message.getFieldWithDefault(msg, 18, 0),
    ballwidth: jspb.Message.getFieldWithDefault(msg, 19, 0),
    ballheight: jspb.Message.getFieldWithDefault(msg, 20, 0),
    p1score: jspb.Message.getFieldWithDefault(msg, 21, 0),
    p2score: jspb.Message.getFieldWithDefault(msg, 22, 0),
    ballx: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bally: jspb.Message.getFieldWithDefault(msg, 2, 0),
    p1x: jspb.Message.getFieldWithDefault(msg, 3, 0),
    p1y: jspb.Message.getFieldWithDefault(msg, 4, 0),
    p2x: jspb.Message.getFieldWithDefault(msg, 5, 0),
    p2y: jspb.Message.getFieldWithDefault(msg, 6, 0),
    p1yvelocity: jspb.Message.getFieldWithDefault(msg, 7, 0),
    p2yvelocity: jspb.Message.getFieldWithDefault(msg, 8, 0),
    ballxvelocity: jspb.Message.getFieldWithDefault(msg, 9, 0),
    ballyvelocity: jspb.Message.getFieldWithDefault(msg, 10, 0),
    fps: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    tps: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    error: jspb.Message.getFieldWithDefault(msg, 23, ""),
    debug: jspb.Message.getBooleanFieldWithDefault(msg, 24, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pong.GameUpdate}
 */
proto.pong.GameUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pong.GameUpdate;
  return proto.pong.GameUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pong.GameUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pong.GameUpdate}
 */
proto.pong.GameUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGamewidth(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGameheight(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setP1width(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setP1height(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setP2width(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setP2height(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBallwidth(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBallheight(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setP1score(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setP2score(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBallx(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBally(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setP1x(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setP1y(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setP2x(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setP2y(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setP1yvelocity(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setP2yvelocity(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBallxvelocity(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBallyvelocity(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFps(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTps(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 24:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDebug(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pong.GameUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pong.GameUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pong.GameUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pong.GameUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGamewidth();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getGameheight();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getP1width();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getP1height();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getP2width();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getP2height();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = message.getBallwidth();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getBallheight();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = message.getP1score();
  if (f !== 0) {
    writer.writeInt32(
      21,
      f
    );
  }
  f = message.getP2score();
  if (f !== 0) {
    writer.writeInt32(
      22,
      f
    );
  }
  f = message.getBallx();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getBally();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getP1x();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getP1y();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getP2x();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getP2y();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getP1yvelocity();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getP2yvelocity();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getBallxvelocity();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getBallyvelocity();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getFps();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = message.getTps();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      23,
      f
    );
  }
  f = message.getDebug();
  if (f) {
    writer.writeBool(
      24,
      f
    );
  }
};


/**
 * optional int32 gameWidth = 13;
 * @return {number}
 */
proto.pong.GameUpdate.prototype.getGamewidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.pong.GameUpdate} returns this
 */
proto.pong.GameUpdate.prototype.setGamewidth = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 gameHeight = 14;
 * @return {number}
 */
proto.pong.GameUpdate.prototype.getGameheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.pong.GameUpdate} returns this
 */
proto.pong.GameUpdate.prototype.setGameheight = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 p1Width = 15;
 * @return {number}
 */
proto.pong.GameUpdate.prototype.getP1width = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.pong.GameUpdate} returns this
 */
proto.pong.GameUpdate.prototype.setP1width = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 p1Height = 16;
 * @return {number}
 */
proto.pong.GameUpdate.prototype.getP1height = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.pong.GameUpdate} returns this
 */
proto.pong.GameUpdate.prototype.setP1height = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int32 p2Width = 17;
 * @return {number}
 */
proto.pong.GameUpdate.prototype.getP2width = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.pong.GameUpdate} returns this
 */
proto.pong.GameUpdate.prototype.setP2width = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional int32 p2Height = 18;
 * @return {number}
 */
proto.pong.GameUpdate.prototype.getP2height = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.pong.GameUpdate} returns this
 */
proto.pong.GameUpdate.prototype.setP2height = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional int32 ballWidth = 19;
 * @return {number}
 */
proto.pong.GameUpdate.prototype.getBallwidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.pong.GameUpdate} returns this
 */
proto.pong.GameUpdate.prototype.setBallwidth = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional int32 ballHeight = 20;
 * @return {number}
 */
proto.pong.GameUpdate.prototype.getBallheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.pong.GameUpdate} returns this
 */
proto.pong.GameUpdate.prototype.setBallheight = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional int32 p1Score = 21;
 * @return {number}
 */
proto.pong.GameUpdate.prototype.getP1score = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.pong.GameUpdate} returns this
 */
proto.pong.GameUpdate.prototype.setP1score = function(value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional int32 p2Score = 22;
 * @return {number}
 */
proto.pong.GameUpdate.prototype.getP2score = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {number} value
 * @return {!proto.pong.GameUpdate} returns this
 */
proto.pong.GameUpdate.prototype.setP2score = function(value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional int32 ballX = 1;
 * @return {number}
 */
proto.pong.GameUpdate.prototype.getBallx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pong.GameUpdate} returns this
 */
proto.pong.GameUpdate.prototype.setBallx = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 ballY = 2;
 * @return {number}
 */
proto.pong.GameUpdate.prototype.getBally = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pong.GameUpdate} returns this
 */
proto.pong.GameUpdate.prototype.setBally = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 p1X = 3;
 * @return {number}
 */
proto.pong.GameUpdate.prototype.getP1x = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pong.GameUpdate} returns this
 */
proto.pong.GameUpdate.prototype.setP1x = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 p1Y = 4;
 * @return {number}
 */
proto.pong.GameUpdate.prototype.getP1y = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pong.GameUpdate} returns this
 */
proto.pong.GameUpdate.prototype.setP1y = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 p2X = 5;
 * @return {number}
 */
proto.pong.GameUpdate.prototype.getP2x = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.pong.GameUpdate} returns this
 */
proto.pong.GameUpdate.prototype.setP2x = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 p2Y = 6;
 * @return {number}
 */
proto.pong.GameUpdate.prototype.getP2y = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.pong.GameUpdate} returns this
 */
proto.pong.GameUpdate.prototype.setP2y = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 p1YVelocity = 7;
 * @return {number}
 */
proto.pong.GameUpdate.prototype.getP1yvelocity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.pong.GameUpdate} returns this
 */
proto.pong.GameUpdate.prototype.setP1yvelocity = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 p2YVelocity = 8;
 * @return {number}
 */
proto.pong.GameUpdate.prototype.getP2yvelocity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.pong.GameUpdate} returns this
 */
proto.pong.GameUpdate.prototype.setP2yvelocity = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 ballXVelocity = 9;
 * @return {number}
 */
proto.pong.GameUpdate.prototype.getBallxvelocity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.pong.GameUpdate} returns this
 */
proto.pong.GameUpdate.prototype.setBallxvelocity = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 ballYVelocity = 10;
 * @return {number}
 */
proto.pong.GameUpdate.prototype.getBallyvelocity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.pong.GameUpdate} returns this
 */
proto.pong.GameUpdate.prototype.setBallyvelocity = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional float fps = 11;
 * @return {number}
 */
proto.pong.GameUpdate.prototype.getFps = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pong.GameUpdate} returns this
 */
proto.pong.GameUpdate.prototype.setFps = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional float tps = 12;
 * @return {number}
 */
proto.pong.GameUpdate.prototype.getTps = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pong.GameUpdate} returns this
 */
proto.pong.GameUpdate.prototype.setTps = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional string error = 23;
 * @return {string}
 */
proto.pong.GameUpdate.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/**
 * @param {string} value
 * @return {!proto.pong.GameUpdate} returns this
 */
proto.pong.GameUpdate.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 23, value);
};


/**
 * optional bool debug = 24;
 * @return {boolean}
 */
proto.pong.GameUpdate.prototype.getDebug = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 24, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pong.GameUpdate} returns this
 */
proto.pong.GameUpdate.prototype.setDebug = function(value) {
  return jspb.Message.setProto3BooleanField(this, 24, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pong.GameStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pong.GameStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pong.GameStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pong.GameStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pong.GameStreamRequest}
 */
proto.pong.GameStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pong.GameStreamRequest;
  return proto.pong.GameStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pong.GameStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pong.GameStreamRequest}
 */
proto.pong.GameStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pong.GameStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pong.GameStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pong.GameStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pong.GameStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string playerId = 1;
 * @return {string}
 */
proto.pong.GameStreamRequest.prototype.getPlayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pong.GameStreamRequest} returns this
 */
proto.pong.GameStreamRequest.prototype.setPlayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.pong);
