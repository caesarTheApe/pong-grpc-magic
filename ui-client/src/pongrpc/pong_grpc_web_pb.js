/**
 * @fileoverview gRPC-Web generated client stub for pong
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.21.12
// source: pong.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.pong = require('./pong_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.pong.PongGameClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.pong.PongGamePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pong.PlayerInput,
 *   !proto.pong.GameUpdate>}
 */
const methodDescriptor_PongGame_SendInput = new grpc.web.MethodDescriptor(
  '/pong.PongGame/SendInput',
  grpc.web.MethodType.UNARY,
  proto.pong.PlayerInput,
  proto.pong.GameUpdate,
  /**
   * @param {!proto.pong.PlayerInput} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pong.GameUpdate.deserializeBinary
);


/**
 * @param {!proto.pong.PlayerInput} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pong.GameUpdate)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pong.GameUpdate>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pong.PongGameClient.prototype.sendInput =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pong.PongGame/SendInput',
      request,
      metadata || {},
      methodDescriptor_PongGame_SendInput,
      callback);
};


/**
 * @param {!proto.pong.PlayerInput} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pong.GameUpdate>}
 *     Promise that resolves to the response
 */
proto.pong.PongGamePromiseClient.prototype.sendInput =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pong.PongGame/SendInput',
      request,
      metadata || {},
      methodDescriptor_PongGame_SendInput);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pong.GameStreamRequest,
 *   !proto.pong.GameUpdateBytes>}
 */
const methodDescriptor_PongGame_StreamUpdates = new grpc.web.MethodDescriptor(
  '/pong.PongGame/StreamUpdates',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.pong.GameStreamRequest,
  proto.pong.GameUpdateBytes,
  /**
   * @param {!proto.pong.GameStreamRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pong.GameUpdateBytes.deserializeBinary
);


/**
 * @param {!proto.pong.GameStreamRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.pong.GameUpdateBytes>}
 *     The XHR Node Readable Stream
 */
proto.pong.PongGameClient.prototype.streamUpdates =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/pong.PongGame/StreamUpdates',
      request,
      metadata || {},
      methodDescriptor_PongGame_StreamUpdates);
};


/**
 * @param {!proto.pong.GameStreamRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.pong.GameUpdateBytes>}
 *     The XHR Node Readable Stream
 */
proto.pong.PongGamePromiseClient.prototype.streamUpdates =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/pong.PongGame/StreamUpdates',
      request,
      metadata || {},
      methodDescriptor_PongGame_StreamUpdates);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pong.SignalReadyRequest,
 *   !proto.pong.SignalReadyResponse>}
 */
const methodDescriptor_PongGame_SignalReady = new grpc.web.MethodDescriptor(
  '/pong.PongGame/SignalReady',
  grpc.web.MethodType.UNARY,
  proto.pong.SignalReadyRequest,
  proto.pong.SignalReadyResponse,
  /**
   * @param {!proto.pong.SignalReadyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pong.SignalReadyResponse.deserializeBinary
);


/**
 * @param {!proto.pong.SignalReadyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pong.SignalReadyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pong.SignalReadyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pong.PongGameClient.prototype.signalReady =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pong.PongGame/SignalReady',
      request,
      metadata || {},
      methodDescriptor_PongGame_SignalReady,
      callback);
};


/**
 * @param {!proto.pong.SignalReadyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pong.SignalReadyResponse>}
 *     Promise that resolves to the response
 */
proto.pong.PongGamePromiseClient.prototype.signalReady =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pong.PongGame/SignalReady',
      request,
      metadata || {},
      methodDescriptor_PongGame_SignalReady);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pong.GameStartedRequest,
 *   !proto.pong.GameStartedResponse>}
 */
const methodDescriptor_PongGame_NotifyGameStarted = new grpc.web.MethodDescriptor(
  '/pong.PongGame/NotifyGameStarted',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.pong.GameStartedRequest,
  proto.pong.GameStartedResponse,
  /**
   * @param {!proto.pong.GameStartedRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pong.GameStartedResponse.deserializeBinary
);


/**
 * @param {!proto.pong.GameStartedRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.pong.GameStartedResponse>}
 *     The XHR Node Readable Stream
 */
proto.pong.PongGameClient.prototype.notifyGameStarted =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/pong.PongGame/NotifyGameStarted',
      request,
      metadata || {},
      methodDescriptor_PongGame_NotifyGameStarted);
};


/**
 * @param {!proto.pong.GameStartedRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.pong.GameStartedResponse>}
 *     The XHR Node Readable Stream
 */
proto.pong.PongGamePromiseClient.prototype.notifyGameStarted =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/pong.PongGame/NotifyGameStarted',
      request,
      metadata || {},
      methodDescriptor_PongGame_NotifyGameStarted);
};


module.exports = proto.pong;

